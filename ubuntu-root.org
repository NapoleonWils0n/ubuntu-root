#+TITLE: ubuntu root dotfiles
#+STARTUP: content
#+STARTUP: overview hideblocks
#+OPTIONS: num:nil author:nil
#+PROPERTY: header-args :mkdirp yes
* tangle dotfiles
** tangle document

C-c C-v t

** tangle only one code block

C-u C-c C-v t

** tangle from the command line

tangle file from the command line
where ~/git/ubuntu-dotfiles/ubuntu-dotfiles.org is the path of the file to tangle

#+begin_src sh
emacs --batch -l org --eval '(org-babel-tangle-file "~/git/ubuntu-dotfiles/ubuntu-dotfiles.org")'
#+end_src
* ubuntu root dotfiles
** doas
*** doas config

#+NAME: doas
#+BEGIN_SRC conf
# check config : doas -C /etc/doas.conf

# allow user
permit keepenv djwilcox

# apt update and upgrade without a password
permit nopass djwilcox cmd apt args update
permit nopass djwilcox cmd apt args upgrade

# mount and unmount drives 
permit nopass djwilcox cmd mount 
permit nopass djwilcox cmd umount 

# zfs and zpool
permit nopass djwilcox cmd zfs 
permit nopass djwilcox cmd zpool 

# allow root to switch to our user
permit nopass setenv { PATH } root as djwilcox

# namespace command
permit nopass setenv { PATH } djwilcox cmd namespace

# vpn
permit nopass djwilcox cmd vpn-netns

# root as root
permit nopass keepenv setenv { PATH } root as root
#+END_SRC

*** doas tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: doas-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/doas.conf"
<<doas>>
#+END_SRC
  
+ current dir

#+NAME: doas-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/doas.conf"
<<doas>>
#+END_SRC

** bin
*** bin config
**** blackrain

#+NAME: blackrain
#+begin_src sh
#!/bin/sh

# transmission fzf menu

# if transmission-daemon isnt running start it
transmission-remote -l >/dev/null 2>&1 || transmission-daemon && sleep 0.1

# input = list of torrents
input=$(transmission-remote -l \
| head -n -1 \
| awk 'NR == 1; NR > 1 {print $0 | "sort -k 2 -n"}' \
| fzf --multi --info=inline --layout=reverse --header-lines=1 --delimiter='\n' --prompt='Select Torrents: ' | awk '{print $1}')


# exit script if no torrents are selected (e.g hit ESC)
if [ "${input}" = "" ]; then exit; fi


# main trd function
trd() {
    printf "%s\n" "${input}" | \
    while read line
    do
      transmission-remote -t"${line}" "${1}" ;
    done
    }


# get files from torrent
get_files() {
    printf "%s\n" "${input}" | \
    while read line
    do
	selection=$(transmission-remote -t"${line}" --info-files \
		| fzf --multi --info=inline --layout=reverse --header-lines=2 --delimiter='\n' --prompt='Select Files: ' \
		| awk -F':' -v RS="\n" '{print $1}' | awk 'a++{printf ","}{printf "%s", $1}')
	transmission-remote -t"${line}" -g"${selection}";
    done
    }


# dont get files from torrent
noget_files() {
    printf "%s\n" "${input}" | \
    while read line
    do
	selection=$(transmission-remote -t"${line}" --info-files \
		| fzf --multi --info=inline --layout=reverse --header-lines=2 --delimiter='\n' --prompt='Select Files: ' \
		| awk -F':' -v RS="\n" '{print $1}' | awk 'a++{printf ","}{printf "%s", $1}')
	transmission-remote -t"${line}" -G"${selection}";
    done
    }


# fzf prompt variables spaces to line up menu options
start_menu='start      - start torrent'
pause_menu='pause      - pause torrent'
info_menu='info       - show torrent info'
files_menu='files      - show files in torrent'
get_files_menu='get        - get items in torrent'
noget_files_menu='noget      - noget items in torrent'
peers_menu='peers      - ask for more peers'
remove_menu='remove     - remove torrent'
purge_menu='purge      - remove torrent and data'


# fzf prompt to specify function to run on links from ytfzf
menu=$(printf "%s\n" \
	      "${start_menu}" \
	      "${pause_menu}" \
	      "${info_menu}" \
	      "${files_menu}" \
	      "${get_files_menu}" \
	      "${noget_files_menu}" \
	      "${peers_menu}" \
	      "${remove_menu}" \
	      "${purge_menu}" \
	      | fzf --delimiter='\n' --prompt='Run transmission function: ' --info=inline --layout=reverse --no-multi)


# case statement to run function based on fzf prompt output
case "${menu}" in
   start*) trd --start;;
   pause*) trd --stop;;
   info*) trd --info;;
   peers*) trd --reannounce;;
   files*) trd --info-files;;
   get*) get_files;;
   noget*) noget_files;;
   remove*) trd --remove;;
   purge*) trd --remove-and-delete;;
   ,*) exit;;
esac
#+end_src

**** chromium-netns

#+NAME: chromium-netns
#+begin_src sh
#!/bin/sh

sh -c "HOME=${HOME} PULSE_SERVER=/run/user/$(id -u "${USER}")/pulse/native PULSE_COOKIE=/home/${USER}/.config/pulse/cookie \
BAMF_DESKTOP_FILE_HINT=/var/lib/snapd/desktop/applications/chromium_chromium.desktop \
/snap/chromium/current/usr/lib/chromium-browser/chrome"
#+end_src

**** firefox-netns

#+NAME: firefox-netns
#+begin_src sh
#!/bin/sh

# firefox namespace

sh -c "HOME=${HOME} PULSE_SERVER=/run/user/$(id -u "${USER}")/pulse/native PULSE_COOKIE=/home/${USER}/.config/pulse/cookie \
BAMF_DESKTOP_FILE_HINT=/var/lib/snapd/desktop/applications/firefox_firefox.desktop \
/snap/firefox/current/usr/lib/firefox/firefox"
#+end_src

**** magnet-add

#+NAME: magnet-add
#+begin_src sh
#!/bin/sh

# transmission add magnet link from browser

transmission-remote --add "$@"
#+end_src

**** namespace

#+NAME: namespace
#+begin_src sh
#!/bin/sh

# open in namespace
ip netns exec vpn doas -u djwilcox -- "$@"
#+end_src

**** netns-vpn

#+NAME: netns-vpn
#+begin_src sh
#!/bin/sh

# openvpn split route with namespace
#===================================

# openvpn up script
up() {
    # create network namespace
    ip netns add vpn || true

    # bring up loop device
    ip netns exec vpn ip link set dev lo up

    # move VPN tunnel to netns
    ip link set dev "$1" up netns vpn mtu "$2"

    # configure tunnel in netns
    ip netns exec vpn ip addr add dev "$1" \
            "$4/${ifconfig_netmask:-30}" \
            ${ifconfig_broadcast:+broadcast "$ifconfig_broadcast"}
    if [ -n "$ifconfig_ipv6_local" ]; then
            ip netns exec vpn ip addr add dev "$1" \
                    "$ifconfig_ipv6_local"/112
    fi

    # set route in netns
    ip netns exec vpn ip route add default via "$route_vpn_gateway"

    # create vpn namespace directory
    mkdir -p /etc/netns/vpn

    # create resolv.conf with 
    echo 'nameserver 127.0.0.1' > /etc/netns/vpn/resolv.conf 

    # stop unbound dns server
    systemctl stop unbound.service

    # sleep for 1 second
    sleep 1

    # start unbound dns server in vpn namespace
    systemctl start unbound-netns.service
}

# openvpn down script
down() {
    # remove namespace and delete resolv.conf
    rm -rf /etc/netns/vpn
    ip netns delete vpn

    # restart unbound dns server
    systemctl stop unbound-netns.service

    # sleep for 1 second
    sleep 1

    # start unbound dns server
    systemctl start unbound.service

    true
}

"$script_type" "$@"
#+end_src

**** openvpn-down

#+NAME: openvpn-down
#+begin_src sh
#!/bin/sh

# openvpn-down
#=============

# clear unbound_outgoing_interface
echo > /etc/unbound/unbound_outgoing_interface

# comment out include
sed -i '/include: "\/etc\/unbound\/unbound_outgoing_interface"/s/^/#/' /etc/unbound/unbound.conf.d/custom.conf

# sleep for 1 second
sleep 1

# restart unbound dns server
systemctl restart unbound.service
#+end_src

**** openvpn-up

#+NAME: openvpn-up
#+begin_src sh
#!/bin/sh

# openvpn-up
#===========

# echo tun0 ip address to unbound_outgoing_interface
echo "outgoing-interface: $(ip a list tun0 \
| grep inet | head -1 | awk '{print $2}' | cut -d'/' -f1)" > /etc/unbound/unbound_outgoing_interface

# uncomment include
sed -i '/include: "\/etc\/unbound\/unbound_outgoing_interface"/s/#//' /etc/unbound/unbound.conf.d/custom.conf

# sleep for 1 second
sleep 1

# restart unbound dns server
systemctl restart unbound.service
#+end_src

**** vpn-netns

#+NAME: vpn-netns
#+begin_src sh
#!/bin/sh

# openvpn split route
#====================

#===============================================================================
# script usage
#===============================================================================

usage () {
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
$(basename "$0") -c infile.ovpn -a auth.txt"
exit 2
}


#===============================================================================
# error messages
#===============================================================================

ROOT_ERR="$(basename "$0") must be run as root"
WRONG_ARGS_ERR='wrong number of arguments passed to script'
INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
NOTFILE_ERR='not a file'


#===============================================================================
# check if script is run as root
#===============================================================================

[ "$(id -u)" -eq 0 ] || usage "${ROOT_ERR}"


#===============================================================================
# check number of aruments passed to script
#===============================================================================

[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"


#===============================================================================
# getopts check options passed to script
#===============================================================================

while getopts ':c:a:h' opt
do
  case ${opt} in
     c) config="${OPTARG}"
     [ -f "${config}" ] || usage "${config} ${NOTFILE_ERR}";;
     a) auth="${OPTARG}"
     [ -f "${auth}" ] || usage "${auth} ${NOTFILE_ERR}";;
     h) usage;;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# openvpn code
#===============================================================================

openvpn \
--auth-nocache --script-security 2 --route-nopull --redirect-gateway \
--ifconfig-noexec --route-noexec \
--up /usr/local/bin/netns-vpn --down /usr/local/bin/netns-vpn \
--config "${config}" \
--mute-replay-warnings \
--auth-user-pass "${auth}"
#+end_src

**** vpn-route

#+NAME: vpn-route
#+begin_src sh
#!/bin/sh

# openvpn split route
#====================

#===============================================================================
# script usage
#===============================================================================

usage () {
# if argument passed to function echo it
[ -z "${1}" ] || echo "! ${1}"
# display help
echo "\
$(basename "$0") -c infile.ovpn -a auth.txt"
exit 2
}


#===============================================================================
# error messages
#===============================================================================

ROOT_ERR="$(basename "$0") must be run as root"
WRONG_ARGS_ERR='wrong number of arguments passed to script'
INVALID_OPT_ERR='Invalid option:'
REQ_ARG_ERR='requires an argument'
NOTFILE_ERR='not a file'


#===============================================================================
# check if script is run as root
#===============================================================================

[ "$(id -u)" -eq 0 ] || usage "${ROOT_ERR}"


#===============================================================================
# check number of aruments passed to script
#===============================================================================

[ $# -gt 0 ] || usage "${WRONG_ARGS_ERR}"


#===============================================================================
# getopts check options passed to script
#===============================================================================

while getopts ':c:a:h' opt
do
  case ${opt} in
     c) config="${OPTARG}"
     [ -f "${config}" ] || usage "${config} ${NOTFILE_ERR}";;
     a) auth="${OPTARG}"
     [ -f "${auth}" ] || usage "${auth} ${NOTFILE_ERR}";;
     h) usage;;
     \?) usage "${INVALID_OPT_ERR} ${OPTARG}" 1>&2;;
     :) usage "${INVALID_OPT_ERR} ${OPTARG} ${REQ_ARG_ERR}" 1>&2;;
  esac
done
shift $((OPTIND-1))


#===============================================================================
# openvpn code
#===============================================================================

openvpn \
--auth-nocache --route-nopull --script-security 2 --redirect-gateway \
--up /usr/local/bin/openvpn-up --down /usr/local/bin/openvpn-down \
--config "${config}" \
--mute-replay-warnings \
--auth-user-pass "${auth}"
#+end_src

*** bin tangle
**** blackrain tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: blackrain-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/local/bin/blackrain" :tangle-mode (identity #o755)
<<blackrain>>
#+END_SRC
  
+ current dir

#+NAME: blackrain-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/bin/blackrain"
<<blackrain>>
#+END_SRC

**** chromium-netns tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: chromium-netns-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/local/bin/chromium-netns" :tangle-mode (identity #o755)
<<chromium-netns>>
#+END_SRC
  
+ current dir

#+NAME: chromium-netns-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/bin/chromium-netns"
<<chromium-netns>>
#+END_SRC

**** firefox-netns tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: firefox-netns-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/local/bin/firefox-netns" :tangle-mode (identity #o755)
<<firefox-netns>>
#+END_SRC
  
+ current dir

#+NAME: firefox-netns-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/bin/firefox-netns"
<<firefox-netns>>
#+END_SRC

**** magnet-add tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: magnet-add-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/local/bin/magnet-add" :tangle-mode (identity #o755)
<<magnet-add>>
#+END_SRC
  
+ current dir

#+NAME: magnet-add-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/bin/magnet-add"
<<magnet-add>>
#+END_SRC

**** namespace tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: namespace-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/local/bin/namespace" :tangle-mode (identity #o755)
<<namespace>>
#+END_SRC
  
+ current dir

#+NAME: namespace-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/bin/namespace"
<<namespace>>
#+END_SRC

**** netns-vpn tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: netns-vpn-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/local/bin/netns-vpn" :tangle-mode (identity #o755)
<<netns-vpn>>
#+END_SRC
  
+ current dir
  
#+NAME: netns-vpn-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/bin/netns-vpn"
<<netns-vpn>>
#+END_SRC

**** openvpn-down tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: openvpn-down-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/local/bin/openvpn-down" :tangle-mode (identity #o755)
<<openvpn-down>>
#+END_SRC
  
+ current dir

#+NAME: openvpn-down-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/bin/openvpn-down"
<<openvpn-down>>
#+END_SRC

**** openvpn-up tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: openvpn-up-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/local/bin/openvpn-up" :tangle-mode (identity #o755)
<<openvpn-up>>
#+END_SRC
  
+ current dir

#+NAME: openvpn-up-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/bin/openvpn-up"
<<openvpn-up>>
#+END_SRC

**** vpn-netns tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: vpn-netns-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/local/bin/vpn-netns" :tangle-mode (identity #o755)
<<vpn-netns>>
#+END_SRC
  
+ current dir

#+NAME: vpn-netns-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/bin/vpn-netns"
<<vpn-netns>>
#+END_SRC

**** vpn-route tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: vpn-route-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/local/bin/vpn-route" :tangle-mode (identity #o755)
<<vpn-route>>
#+END_SRC
  
+ current dir

#+NAME: vpn-route-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/local/bin/vpn-route"
<<vpn-route>>
#+END_SRC

** xorg
*** xorg config

#+NAME: xorg
#+BEGIN_SRC conf
Section "Monitor"
    Identifier "LVDS0"
    Option "DPMS" "false"
EndSection

Section "ServerLayout"
    Identifier "ServerLayout0"
    Option "StandbyTime" "0"
    Option "SuspendTime" "0"
    Option "OffTime"     "0"
    Option "BlankTime"   "0"
EndSection
#+END_SRC

*** xorg tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: xorg-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/X11/xorg.conf.d/10-monitor.conf" :tangle-mode (identity #o644)
<<xorg>>
#+END_SRC
  
+ current dir

#+NAME: xorg-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/X11/xorg.conf.d/10-monitor.conf"
<<xorg>>
#+END_SRC

** xmonad xsession
*** xmonad xsession config

#+NAME: xmonad-xsession
#+BEGIN_SRC conf
[Desktop Entry]
Name=XMonad
Comment=Lightweight tiling window manager
Exec=/home/djwilcox/.cache/xmonad/xmonad-x86_64-linux
Type=XSession
#+END_SRC

*** xmonad xession tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: xmonad-xsession-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/share/xsessions/xmonad.desktop" :tangle-mode (identity #o644)
<<xmonad-xsession>>
#+END_SRC
  
+ current dir

#+NAME: xmonad-xsession-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/share/xsessions/xmonad.desktop"
<<xmonad-xsession>>
#+END_SRC

** zsh completions
*** zsh completions config
**** playerctl config

#+NAME: playerctl
#+BEGIN_SRC conf
#compdef playerctl

typeset -A opt_args
__playerctl() {
	command playerctl "$@" 2>/dev/null
}

__playerctl_ctx() {
	local -a player_opts=(
		${(kv)opt_args[(I)-p|--player]}
		${(kv)opt_args[(I)-i|--ignore-player]}
		${(kv)opt_args[(I)-a|--all-players]}
	)
	__playerctl "$player_opts[@]" "$@"
}

local -a playercmd_loop=(/$'(none|track|playlist)\0'/ ':(none track playlist)')
local -a playercmd_shuffle=(/$'(on|off)\0'/ ':(on off)')

(( $+functions[_playerctl_players] )) ||
_playerctl_players() {
	local -a players=( ${(@f)"$(__playerctl --list-all)"} )
	players+=( "%all" )
	compadd "$@" -a players
}

(( $+functions[_playerctl_metadata_keys] )) ||
_playerctl_metadata_keys() {
	local -a keys
	__playerctl_ctx metadata |
	while read PLAYER KEY VALUE; do
		keys+="$KEY"
	done
	_multi_parts "$@" -i ":" keys
}
local -a playerctl_command_metadata_keys=(/$'[^\0]#\0'/ ':keys:key:_playerctl_metadata_keys')

local -a playerctl_command
_regex_words commands 'playerctl command' \
	'play:Command the player to play' \
	'pause:Command the player to pause' \
	'play-pause:Command the player to toggle between play/pause' \
	'stop:Command the player to stop' \
	'next:Command the player to skip to the next track' \
	'previous:Command the player to skip to the previous track' \
	'position:Command the player to go or seek to the position' \
	'volume:Print or set the volume level from 0.0 to 1.0' \
	'status:Get the play status of the player' \
	'metadata:Print the metadata information for the current track:$playerctl_command_metadata_keys' \
	'open:Command the player to open the given URI' \
	'loop:Print or set the loop status:$playercmd_loop' \
	'shuffle:Print or set the shuffle status:$playercmd_shuffle'
playerctl_command=( /$'[^\0]#\0'/ "$reply[@]" )
_regex_arguments _playerctl_command "$playerctl_command[@]"

_arguments -S -s\
	'(-h --help)'{-h,--help}'[Show help message and quit]' \
	'(-v --version)'{-v,--version}'[Print version information and quit]' \
	'(-l --list-all)'{-l,--list-all}'[List all available players]' \
	'(-F, --follow)'{-F,--follow}'[Bock and append the query to output when it changes]' \
	'(-f --format)'{-f,--format=}'[Format string for printing properties and metadata]' \
	'(-i --ignore-player)'{-i,--ignore-player=}'[Comma separated list of players to ignore]:players:_sequence _playerctl_players' \
	'(-a --all-players)'{-a,--all-players}'[Control all players instead of just the first]' \
	'(-p --player)'{-p,--player=}'[Comma separated list of players to control]:players:_sequence _playerctl_players' \
	'*::playerctl command:= _playerctl_command'
#+END_SRC

**** yt-dlp config

#+NAME: yt-dlp
#+BEGIN_SRC conf
#compdef yt-dlp

__yt_dlp() {
    local curcontext="$curcontext" fileopts diropts cur prev
    typeset -A opt_args
    fileopts="--download-archive|-a|--batch-file|--load-info-json|--load-info|--cookies|--no-cookies"
    diropts="--cache-dir"
    cur=$words[CURRENT]
    case $cur in
        :)
            _arguments '*: :(::ytfavorites ::ytrecommended ::ytsubscriptions ::ytwatchlater ::ythistory)'
        ;;
        ,*)
            prev=$words[CURRENT-1]
            if [[ ${prev} =~ ${fileopts} ]]; then
                _path_files
            elif [[ ${prev} =~ ${diropts} ]]; then
                _path_files -/
            elif [[ ${prev} == "--remux-video" ]]; then
                _arguments '*: :(mp4 mkv)'
            elif [[ ${prev} == "--recode-video" ]]; then
                _arguments '*: :(mp4 flv ogg webm mkv)'
            else
                _arguments '*: :(--help --version --update --ignore-errors --no-abort-on-error --abort-on-error --dump-user-agent --list-extractors --extractor-descriptions --force-generic-extractor --default-search --ignore-config --config-location --flat-playlist --no-flat-playlist --mark-watched --no-mark-watched --no-colors --compat-options --proxy --socket-timeout --source-address --force-ipv4 --force-ipv6 --geo-verification-proxy --cn-verification-proxy --geo-bypass --no-geo-bypass --geo-bypass-country --geo-bypass-ip-block --playlist-start --playlist-end --playlist-items --match-title --reject-title --max-downloads --min-filesize --max-filesize --date --datebefore --dateafter --min-views --max-views --match-filter --no-match-filter --no-playlist --yes-playlist --age-limit --download-archive --break-on-existing --break-on-reject --skip-playlist-after-errors --no-download-archive --include-ads --no-include-ads --concurrent-fragments --limit-rate --throttled-rate --retries --fragment-retries --skip-unavailable-fragments --abort-on-unavailable-fragment --keep-fragments --no-keep-fragments --buffer-size --resize-buffer --no-resize-buffer --http-chunk-size --test --playlist-reverse --no-playlist-reverse --playlist-random --xattr-set-filesize --hls-prefer-native --hls-prefer-ffmpeg --hls-use-mpegts --no-hls-use-mpegts --downloader --downloader-args --batch-file --id --paths --output --output-na-placeholder --autonumber-size --autonumber-start --restrict-filenames --no-restrict-filenames --windows-filenames --no-windows-filenames --trim-filenames --auto-number --title --literal --no-overwrites --force-overwrites --no-force-overwrites --continue --no-continue --part --no-part --mtime --no-mtime --write-description --no-write-description --write-info-json --no-write-info-json --write-annotations --no-write-annotations --write-playlist-metafiles --no-write-playlist-metafiles --clean-infojson --no-clean-infojson --write-comments --no-write-comments --load-info-json --cookies --no-cookies --cookies-from-browser --no-cookies-from-browser --cache-dir --no-cache-dir --rm-cache-dir --write-thumbnail --no-write-thumbnail --write-all-thumbnails --list-thumbnails --write-link --write-url-link --write-webloc-link --write-desktop-link --quiet --no-warnings --simulate --no-simulate --ignore-no-formats-error --no-ignore-no-formats-error --skip-download --print --get-url --get-title --get-id --get-thumbnail --get-description --get-duration --get-filename --get-format --dump-json --dump-single-json --print-json --force-write-archive --newline --no-progress --console-title --verbose --dump-pages --write-pages --youtube-print-sig-code --print-traffic --call-home --no-call-home --encoding --no-check-certificate --prefer-insecure --user-agent --referer --add-header --bidi-workaround --sleep-requests --sleep-interval --max-sleep-interval --sleep-subtitles --format --format-sort --format-sort-force --no-format-sort-force --video-multistreams --no-video-multistreams --audio-multistreams --no-audio-multistreams --all-formats --prefer-free-formats --no-prefer-free-formats --check-formats --no-check-formats --list-formats --list-formats-as-table --list-formats-old --merge-output-format --allow-unplayable-formats --no-allow-unplayable-formats --write-subs --no-write-subs --write-auto-subs --no-write-auto-subs --all-subs --list-subs --sub-format --sub-langs --username --password --twofactor --netrc --netrc-location --video-password --ap-mso --ap-username --ap-password --ap-list-mso --extract-audio --audio-format --audio-quality --remux-video --recode-video --postprocessor-args --keep-video --no-keep-video --post-overwrites --no-post-overwrites --embed-subs --no-embed-subs --embed-thumbnail --no-embed-thumbnail --embed-metadata --no-embed-metadata --embed-chapters --no-embed-chapters --metadata-from-title --parse-metadata --replace-in-metadata --xattrs --fixup --prefer-avconv --prefer-ffmpeg --ffmpeg-location --exec --no-exec --exec-before-download --no-exec-before-download --convert-subs --convert-thumbnails --split-chapters --no-split-chapters --remove-chapters --no-remove-chapters --force-keyframes-at-cuts --no-force-keyframes-at-cuts --sponsorblock-mark --sponsorblock-remove --sponsorblock-chapter-title --no-sponsorblock --sponsorblock-api --sponskrub --no-sponskrub --sponskrub-cut --no-sponskrub-cut --sponskrub-force --no-sponskrub-force --sponskrub-location --sponskrub-args --extractor-retries --allow-dynamic-mpd --ignore-dynamic-mpd --hls-split-discontinuity --no-hls-split-discontinuity --extractor-args --youtube-include-dash-manifest --youtube-skip-dash-manifest --youtube-include-hls-manifest --youtube-skip-hls-manifest)'
            fi
        ;;
    esac
}

__yt_dlp
#+END_SRC

*** zsh completions tangle
**** playerctl tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: playerctl-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/share/zsh/vendor-completions/_playerctl" :tangle-mode (identity #o644)
<<playerctl>>
#+END_SRC
  
+ current dir

#+NAME: playerctl-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/share/zsh/vendor-completions/_playerctl"
<<playerctl>>
#+END_SRC

**** yt-dlp tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: yt-dlp-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/usr/share/zsh/vendor-completions/_yt-dlp" :tangle-mode (identity #o644)
<<yt-dlp>>
#+END_SRC
  
+ current dir

#+NAME: yt-dlp-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "usr/share/zsh/vendor-completions/_yt-dlp"
<<yt-dlp>>
#+END_SRC

** unbound
*** unbound config
**** unbound.conf config

#+NAME: unbound.conf
#+BEGIN_SRC conf
# Unbound configuration file for Debian.
#
# See the unbound.conf(5) man page.
#
# See /usr/share/doc/unbound/examples/unbound.conf for a commented
# reference config file.
#
# The following line includes additional configuration files from the
# /etc/unbound/unbound.conf.d directory.
include: "/etc/unbound/unbound.conf.d/*.conf"
#+END_SRC

**** custom.conf config

#+NAME: custom.conf
#+BEGIN_SRC conf
# See unbound.conf(5) man page, version 1.5.7.

server:
	include: "/etc/unbound/unbound_ad_servers"
 include: "/etc/unbound/unbound_outgoing_interface"
	verbosity: 1
	access-control: 0.0.0.0/0 refuse
	access-control: 127.0.0.0/8 allow
	access-control: ::0/0 refuse
	access-control: ::1 allow
	access-control: ::ffff:127.0.0.1 allow
	
	# get one from https://www.internic.net/domain/named.cache
   #root-hints: "/etc/unbound/root.hints"

	# enable to not answer id.server and hostname.bind queries.
	hide-identity: yes
	hide-version: yes
	harden-glue: yes
	harden-dnssec-stripped: yes

        # needed for dnscrypt
	do-not-query-localhost: no

	# trust-anchor-file: "/etc/unbound/trusted-key.key"
	#auto-trust-anchor-file: "/etc/unbound/keys/dnssec-root-anchor.key"
remote-control:
	control-enable: no

# dnscrypt
forward-zone:
        name: "."
        forward-addr: 127.0.0.1@5353

#+END_SRC

*** unbound tangle
**** unbound.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: unbound.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/unbound/unbound.conf" :tangle-mode (identity #o644)
<<unbound.conf>>
#+END_SRC
  
+ current dir

#+NAME: unbound.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/unbound/unbound.conf"
<<unbound.conf>>
#+END_SRC

**** custom.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: custom.conf-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/unbound/unbound.conf.d/custom.conf" :tangle-mode (identity #o644)
<<custom.conf>>
#+END_SRC
  
+ current dir

#+NAME: custom.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/unbound/unbound.conf.d/custom.conf"
<<custom.conf>>
#+END_SRC

** resolv
*** resolv config

#+NAME: resolv
#+BEGIN_SRC conf
search localdomain
nameserver 127.0.0.1
options edns0
#+END_SRC

*** resolv tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: resolv-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/resolv.conf" :tangle-mode (identity #o644)
<<resolv>>
#+END_SRC
  
+ current dir

#+NAME: resolv-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/resolv.conf"
<<resolv>>
#+END_SRC
** dhclient
*** dhclient config

#+NAME: dhclient
#+BEGIN_SRC conf
# Configuration file for /sbin/dhclient.
#
# This is a sample configuration file for dhclient. See dhclient.conf's
#	man page for more information about the syntax of this file
#	and a more comprehensive list of the parameters understood by
#	dhclient.
#
# Normally, if the DHCP server provides reasonable information and does
#	not leave anything out (like the domain name, for example), then
#	few changes must be made to this file, if any.
#

option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;

nohook resolv.conf;
send host-name = gethostname();
request subnet-mask, broadcast-address, time-offset, routers,
	domain-name, domain-name-servers, domain-search, host-name,
	dhcp6.name-servers, dhcp6.domain-search, dhcp6.fqdn, dhcp6.sntp-servers,
	netbios-name-servers, netbios-scope, interface-mtu,
	rfc3442-classless-static-routes, ntp-servers;

#send dhcp-client-identifier 1:0:a0:24:ab:fb:9c;
#send dhcp-lease-time 3600;
#supersede domain-name "fugue.com home.vix.com";
#prepend domain-name-servers 127.0.0.1;
#require subnet-mask, domain-name-servers;
timeout 300;
#retry 60;
#reboot 10;
#select-timeout 5;
#initial-interval 2;
#script "/sbin/dhclient-script";
#media "-link0 -link1 -link2", "link0 link1";
#reject 192.33.137.209;

#alias {
#  interface "eth0";
#  fixed-address 192.5.5.213;
#  option subnet-mask 255.255.255.255;
#}

#lease {
#  interface "eth0";
#  fixed-address 192.33.137.200;
#  medium "link0 link1";
#  option host-name "andare.swiftmedia.com";
#  option subnet-mask 255.255.255.0;
#  option broadcast-address 192.33.137.255;
#  option routers 192.33.137.250;
#  option domain-name-servers 127.0.0.1;
#  renew 2 2000/1/12 00:00:01;
#  rebind 2 2000/1/12 00:00:01;
#  expire 2 2000/1/12 00:00:01;
#}
#+END_SRC

*** dhclient tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: dhclient-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/dhcp/dhclient.conf" :tangle-mode (identity #o644)
<<dhclient>>
#+END_SRC
  
+ current dir

#+NAME: dhclient-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/dhcp/dhclient.conf"
<<dhclient>>
#+END_SRC

** dnscrypt-proxy
*** dnscrypt-proxy config

#+NAME: dnscrypt-proxy
#+BEGIN_SRC conf
##############################################
#                                            #
#        dnscrypt-proxy configuration        #
#                                            #
##############################################

## This is an example configuration file.
## You should adjust it to your needs, and save it as "dnscrypt-proxy.toml"
##
## Online documentation is available here: https://dnscrypt.info/doc



##################################
#         Global settings        #
##################################

## List of servers to use
##
## Servers from the "public-resolvers" source (see down below) can
## be viewed here: https://dnscrypt.info/public-servers
##
## If this line is commented, all registered servers matching the require_* filters
## will be used.
##
## The proxy will automatically pick the fastest, working servers from the list.
## Remove the leading # first to enable this; lines starting with # are ignored.

# server_names = ['scaleway-fr', 'google', 'yandex', 'cloudflare']
server_names = ['google']


## List of local addresses and ports to listen to. Can be IPv4 and/or IPv6.
## Note: When using systemd socket activation, choose an empty set (i.e. [] ).

listen_addresses = []
#listen_addresses = ['127.0.0.1:5353']


## Maximum number of simultaneous client connections to accept

max_clients = 250


## Switch to a different system user after listening sockets have been created.
## Note (1): this feature is currently unsupported on Windows.
## Note (2): this feature is not compatible with systemd socket activation.
## Note (3): when using -pidfile, the PID file directory must be writable by the new user

# user_name = 'nobody'


## Require servers (from static + remote sources) to satisfy specific properties

# Use servers reachable over IPv4
ipv4_servers = true

# Use servers reachable over IPv6 -- Do not enable if you don't have IPv6 connectivity
ipv6_servers = false

# Use servers implementing the DNSCrypt protocol
#dnscrypt_servers = true
dnscrypt_servers = false

# Use servers implementing the DNS-over-HTTPS protocol
doh_servers = true


## Require servers defined by remote sources to satisfy specific properties

# Server must support DNS security extensions (DNSSEC)
#require_dnssec = false
require_dnssec = true

# Server must not log user queries (declarative)
require_nolog = true

# Server must not enforce its own blacklist (for parental control, ads blocking...)
require_nofilter = true

# Server names to avoid even if they match all criteria
disabled_server_names = []


## Always use TCP to connect to upstream servers.
## This can be useful if you need to route everything through Tor.
## Otherwise, leave this to `false`, as it doesn't improve security
## (dnscrypt-proxy will always encrypt everything even using UDP), and can
## only increase latency.

force_tcp = false


## SOCKS proxy
## Uncomment the following line to route all TCP connections to a local Tor node
## Tor doesn't support UDP, so set `force_tcp` to `true` as well.

# proxy = "socks5://127.0.0.1:9050"


## HTTP/HTTPS proxy
## Only for DoH servers

# http_proxy = "http://127.0.0.1:8888"


## How long a DNS query will wait for a response, in milliseconds

timeout = 2500


## Keepalive for HTTP (HTTPS, HTTP/2) queries, in seconds

keepalive = 30


## Use the REFUSED return code for blocked responses
## Setting this to `false` means that some responses will be lies.
## Unfortunately, `false` appears to be required for Android 8+

refused_code_in_responses = false


## Load-balancing strategy: 'p2' (default), 'ph', 'first' or 'random'

# lb_strategy = 'p2'

## Set to `true` to constantly try to estimate the latency of all the resolvers
## and adjust the load-balancing parameters accordingly, or to `false` to disable.

# lb_estimator = true


## Log level (0-6, default: 2 - 0 is very verbose, 6 only contains fatal errors)

# log_level = 2


## log file for the application

# log_file = 'dnscrypt-proxy.log'


## Use the system logger (syslog on Unix, Event Log on Windows)

# use_syslog = true


## Delay, in minutes, after which certificates are reloaded

cert_refresh_delay = 240


## DNSCrypt: Create a new, unique key for every single DNS query
## This may improve privacy but can also have a significant impact on CPU usage
## Only enable if you don't have a lot of network load

# dnscrypt_ephemeral_keys = false


## DoH: Disable TLS session tickets - increases privacy but also latency

# tls_disable_session_tickets = false


## DoH: Use a specific cipher suite instead of the server preference
## 49199 = TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
## 49195 = TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
## 52392 = TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
## 52393 = TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
##
## On non-Intel CPUs such as MIPS routers and ARM systems (Android, Raspberry Pi...),
## the following suite improves performance.
## This may also help on Intel CPUs running 32-bit operating systems.
##
## Keep tls_cipher_suite empty if you have issues fetching sources or
## connecting to some DoH servers. Google and Cloudflare are fine with it.

# tls_cipher_suite = [52392, 49199]


## Fallback resolver
## This is a normal, non-encrypted DNS resolver, that will be only used
## for one-shot queries when retrieving the initial resolvers list, and
## only if the system DNS configuration doesn't work.
## No user application queries will ever be leaked through this resolver,
## and it will not be used after IP addresses of resolvers URLs have been found.
## It will never be used if lists have already been cached, and if stamps
## don't include host names without IP addresses.
## It will not be used if the configured system DNS works.
## A resolver supporting DNSSEC is recommended. This may become mandatory.
##
## People in China may need to use 114.114.114.114:53 here.
## Other popular options include 8.8.8.8 and 1.1.1.1.

fallback_resolver = '9.9.9.9:53'


## Never let dnscrypt-proxy try to use the system DNS settings;
## unconditionally use the fallback resolver.

ignore_system_dns = false


## Maximum time (in seconds) to wait for network connectivity before
## initializing the proxy.
## Useful if the proxy is automatically started at boot, and network
## connectivity is not guaranteed to be immediately available.
## Use 0 to not test for connectivity at all,
## and -1 to wait as much as possible.

netprobe_timeout = 60

## Address and port to try initializing a connection to, just to check
## if the network is up. It can be any address and any port, even if
## there is nothing answering these on the other side. Just don't use
## a local address, as the goal is to check for Internet connectivity.
## On Windows, a datagram with a single, nul byte will be sent, only
## when the system starts.
## On other operating systems, the connection will be initialized
## but nothing will be sent at all.

netprobe_address = "9.9.9.9:53"


## Offline mode - Do not use any remote encrypted servers.
## The proxy will remain fully functional to respond to queries that
## plugins can handle directly (forwarding, cloaking, ...)

# offline_mode = false


## Automatic log files rotation

# Maximum log files size in MB
log_files_max_size = 10

# How long to keep backup files, in days
log_files_max_age = 7

# Maximum log files backups to keep (or 0 to keep all backups)
log_files_max_backups = 1



#########################
#        Filters        #
#########################

## Immediately respond to IPv6-related queries with an empty response
## This makes things faster when there is no IPv6 connectivity, but can
## also cause reliability issues with some stub resolvers.
## Do not enable if you added a validating resolver such as dnsmasq in front
## of the proxy.

#block_ipv6 = false
block_ipv6 = true



##################################################################################
#        Route queries for specific domains to a dedicated set of servers        #
##################################################################################

## Example map entries (one entry per line):
## example.com 9.9.9.9
## example.net 9.9.9.9,8.8.8.8,1.1.1.1

# forwarding_rules = 'forwarding-rules.txt'



###############################
#        Cloaking rules       #
###############################

## Cloaking returns a predefined address for a specific name.
## In addition to acting as a HOSTS file, it can also return the IP address
## of a different name. It will also do CNAME flattening.
##
## Example map entries (one entry per line)
## example.com     10.1.1.1
## www.google.com  forcesafesearch.google.com

# cloaking_rules = 'cloaking-rules.txt'



###########################
#        DNS cache        #
###########################

## Enable a DNS cache to reduce latency and outgoing traffic

cache = true


## Cache size

cache_size = 512


## Minimum TTL for cached entries

cache_min_ttl = 600


## Maximum TTL for cached entries

cache_max_ttl = 86400


## Minimum TTL for negatively cached entries

cache_neg_min_ttl = 60


## Maximum TTL for negatively cached entries

cache_neg_max_ttl = 600



###############################
#        Query logging        #
###############################

## Log client queries to a file

[query_log]

  ## Path to the query log file (absolute, or relative to the same directory as the executable file)

  # file = 'query.log'


  ## Query log format (currently supported: tsv and ltsv)

  format = 'tsv'


  ## Do not log these query types, to reduce verbosity. Keep empty to log everything.

  # ignored_qtypes = ['DNSKEY', 'NS']



############################################
#        Suspicious queries logging        #
############################################

## Log queries for nonexistent zones
## These queries can reveal the presence of malware, broken/obsolete applications,
## and devices signaling their presence to 3rd parties.

[nx_log]

  ## Path to the query log file (absolute, or relative to the same directory as the executable file)

  # file = 'nx.log'


  ## Query log format (currently supported: tsv and ltsv)

  format = 'tsv'



######################################################
#        Pattern-based blocking (blacklists)        #
######################################################

## Blacklists are made of one pattern per line. Example of valid patterns:
##
##   example.com
##   =example.com
##   *sex*
##   ads.*
##   ads*.example.*
##   ads*.example[0-9]*.com
##
## Example blacklist files can be found at https://download.dnscrypt.info/blacklists/
## A script to build blacklists from public feeds can be found in the
## `utils/generate-domains-blacklists` directory of the dnscrypt-proxy source code.

[blacklist]

  ## Path to the file of blocking rules (absolute, or relative to the same directory as the executable file)

  # blacklist_file = 'blacklist.txt'


  ## Optional path to a file logging blocked queries

  # log_file = 'blocked.log'


  ## Optional log format: tsv or ltsv (default: tsv)

  # log_format = 'tsv'



###########################################################
#        Pattern-based IP blocking (IP blacklists)        #
###########################################################

## IP blacklists are made of one pattern per line. Example of valid patterns:
##
##   127.*
##   fe80:abcd:*
##   192.168.1.4

[ip_blacklist]

  ## Path to the file of blocking rules (absolute, or relative to the same directory as the executable file)

  # blacklist_file = 'ip-blacklist.txt'


  ## Optional path to a file logging blocked queries

  # log_file = 'ip-blocked.log'


  ## Optional log format: tsv or ltsv (default: tsv)

  # log_format = 'tsv'



######################################################
#   Pattern-based whitelisting (blacklists bypass)   #
######################################################

## Whitelists support the same patterns as blacklists
## If a name matches a whitelist entry, the corresponding session
## will bypass names and IP filters.
##
## Time-based rules are also supported to make some websites only accessible at specific times of the day.

[whitelist]

  ## Path to the file of whitelisting rules (absolute, or relative to the same directory as the executable file)

  # whitelist_file = 'whitelist.txt'


  ## Optional path to a file logging whitelisted queries

  # log_file = 'whitelisted.log'


  ## Optional log format: tsv or ltsv (default: tsv)

  # log_format = 'tsv'



##########################################
#        Time access restrictions        #
##########################################

## One or more weekly schedules can be defined here.
## Patterns in the name-based blocklist can optionally be followed with @schedule_name
## to apply the pattern 'schedule_name' only when it matches a time range of that schedule.
##
## For example, the following rule in a blacklist file:
## *.youtube.* @time-to-sleep
## would block access to YouTube only during the days, and period of the days
## define by the 'time-to-sleep' schedule.
##
## {after='21:00', before= '7:00'} matches 0:00-7:00 and 21:00-0:00
## {after= '9:00', before='18:00'} matches 9:00-18:00

[schedules]

  # [schedules.'time-to-sleep']
  # mon = [{after='21:00', before='7:00'}]
  # tue = [{after='21:00', before='7:00'}]
  # wed = [{after='21:00', before='7:00'}]
  # thu = [{after='21:00', before='7:00'}]
  # fri = [{after='23:00', before='7:00'}]
  # sat = [{after='23:00', before='7:00'}]
  # sun = [{after='21:00', before='7:00'}]

  # [schedules.'work']
  # mon = [{after='9:00', before='18:00'}]
  # tue = [{after='9:00', before='18:00'}]
  # wed = [{after='9:00', before='18:00'}]
  # thu = [{after='9:00', before='18:00'}]
  # fri = [{after='9:00', before='17:00'}]



#########################
#        Servers        #
#########################

## Remote lists of available servers
## Multiple sources can be used simultaneously, but every source
## requires a dedicated cache file.
##
## Refer to the documentation for URLs of public sources.
##
## A prefix can be prepended to server names in order to
## avoid collisions if different sources share the same for
## different servers. In that case, names listed in `server_names`
## must include the prefixes.
##
## If the `urls` property is missing, cache files and valid signatures
## must be already present; This doesn't prevent these cache files from
## expiring after `refresh_delay` hours.

[sources]

  ## An example of a remote source from https://github.com/DNSCrypt/dnscrypt-resolvers

  [sources.'public-resolvers']
  urls = ['https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v2/public-resolvers.md', 'https://download.dnscrypt.info/resolvers-list/v2/public-resolvers.md']
  cache_file = 'public-resolvers.md'
  minisign_key = 'RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3'
  refresh_delay = 72
  prefix = ''

  ## Quad9 over DNSCrypt - https://quad9.net/

  # [sources.quad9-resolvers]
  # urls = ["https://www.quad9.net/quad9-resolvers.md"]
  # minisign_key = "RWQBphd2+f6eiAqBsvDZEBXBGHQBJfeG6G+wJPPKxCZMoEQYpmoysKUN"
  # cache_file = "quad9-resolvers.md"
  # refresh_delay = 72
  # prefix = "quad9-"

  ## Another example source, with resolvers censoring some websites not appropriate for children
  ## This is a subset of the `public-resolvers` list, so enabling both is useless

  #  [sources.'parental-control']
  #  urls = ['https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v2/parental-control.md', 'https://download.dnscrypt.info/resolvers-list/v2/parental-control.md']
  #  cache_file = 'parental-control.md'
  #  minisign_key = 'RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3'



## Optional, local, static list of additional servers
## Mostly useful for testing your own servers.

[static]

  # [static.'google']
  # stamp = 'sdns://AgUAAAAAAAAAAAAOZG5zLmdvb2dsZS5jb20NL2V4cGVyaW1lbnRhbA'
#+END_SRC

*** dnscrypt-proxy tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: dnscrypt-proxy-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/dnscrypt-proxy/dnscrypt-proxy.toml" :tangle-mode (identity #o644)
<<dnscrypt-proxy>>
#+END_SRC
  
+ current dir

#+NAME: dnscrypt-proxy-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/dnscrypt-proxy/dnscrypt-proxy.toml"
<<dnscrypt-proxy>>
#+END_SRC

** systemd
*** systemd config
**** logind.conf config

#+NAME: logind
#+begin_src conf
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.
#
# Entries in this file show the compile time defaults.
# You can change settings by editing this file.
# Defaults can be restored by simply deleting this file.
#
# See logind.conf(5) for details.

[Login]
#NAutoVTs=6
#ReserveVT=6
#KillUserProcesses=no
#KillOnlyUsers=
#KillExcludeUsers=root
#InhibitDelayMaxSec=5
#HandlePowerKey=poweroff
#HandleSuspendKey=suspend
#HandleHibernateKey=hibernate
HandleLidSwitch=hibernate
HandleLidSwitchDocked=hibernate
#PowerKeyIgnoreInhibited=no
#SuspendKeyIgnoreInhibited=no
#HibernateKeyIgnoreInhibited=no
#LidSwitchIgnoreInhibited=yes
#HoldoffTimeoutSec=30s
#IdleAction=ignore
#IdleActionSec=30min
#RuntimeDirectorySize=10%
#RemoveIPC=yes
#InhibitorsMax=8192
#SessionsMax=8192
#UserTasksMax=33%

#+end_src

**** dnscrypt-proxy.service config

#+NAME: dnscrypt-proxy.service
#+begin_src conf
[Unit]
Description=DNSCrypt-proxy client
Documentation=https://github.com/jedisct1/dnscrypt-proxy/wiki
Requires=dnscrypt-proxy.socket
After=network.target
Before=nss-lookup.target
Wants=nss-lookup.target

[Service]
NonBlocking=true
ExecStart=/usr/sbin/dnscrypt-proxy --config /etc/dnscrypt-proxy/dnscrypt-proxy.toml
ProtectHome=yes
ProtectControlGroups=yes
ProtectKernelModules=yes

# Run dnscrypt-proxy as unprivileged user with
# temporary assigned UID/GID. See man:systemd.exec
# for more info. Requires systemd 232+.
DynamicUser=yes
CacheDirectory=dnscrypt-proxy
LogsDirectory=dnscrypt-proxy
RuntimeDirectory=dnscrypt-proxy

[Install]
Also=dnscrypt-proxy.socket
WantedBy=multi-user.target
#+end_src

**** dnscrypt-proxy.socket config

#+NAME: dnscrypt-proxy.socket
#+begin_src conf
[Unit]
Description=DNSCrypt-proxy socket
Documentation=https://github.com/jedisct1/dnscrypt-proxy/wiki
Before=nss-lookup.target
Wants=nss-lookup.target

[Socket]
ListenStream=127.0.0.1:5353
ListenDatagram=127.0.0.1:5353
NoDelay=true
DeferAcceptSec=1

[Install]
WantedBy=sockets.target
#+end_src

**** transmission.service.d config

#+NAME: transmission.service.d
#+begin_src conf
[Service]
User=djwilcox
#+end_src

**** unbound-netns.service config

#+NAME: unbound-netns.service
#+begin_src conf
[Unit]
Description=Unbound DNS server
Documentation=man:unbound(8)
After=network.target
Before=nss-lookup.target
Wants=nss-lookup.target

[Service]
Type=notify
Restart=on-failure
EnvironmentFile=-/etc/default/unbound
ExecStartPre=-/usr/lib/unbound/package-helper chroot_setup
ExecStartPre=-/usr/lib/unbound/package-helper root_trust_anchor_update
ExecStart=/usr/bin/ip netns exec vpn /usr/sbin/unbound -d $DAEMON_OPTS
ExecReload=/usr/bin/ip netns exec vpn /usr/sbin/unbound-control reload
PIDFile=/run/unbound-netns.pid

[Install]
WantedBy=multi-user.target
#+end_src

*** systemd tangle
**** logind.conf tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: logind-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/systemd/logind.conf" :tangle-mode (identity #o644)
<<logind>>
#+END_SRC
  
+ current dir

#+NAME: logind-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/systemd/logind.conf"
<<logind>>
#+END_SRC

**** dnscrypt-proxy.service tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: dnscrypt-proxy.service-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/systemd/system/dnscrypt-proxy.service" :tangle-mode (identity #o644)
<<dnscrypt-proxy.service>>
#+END_SRC
  
+ current dir

#+NAME: dnscrypt-proxy.service-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/systemd/system/dnscrypt-proxy.service"
<<dnscrypt-proxy.service>>
#+END_SRC

**** dnscrypt-proxy.socket tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: dnscrypt-proxy.socket-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/systemd/system/dnscrypt-proxy.socket" :tangle-mode (identity #o644)
<<dnscrypt-proxy.socket>>
#+END_SRC
  
+ current dir

#+NAME: dnscrypt-proxy.socket-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/systemd/system/dnscrypt-proxy.socket"
<<dnscrypt-proxy.socket>>
#+END_SRC

**** transmission.service.d tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: transmission.service.d-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/systemd/system/transmission.service.d/username.conf" :tangle-mode (identity #o644)
<<transmission.service.d>>
#+END_SRC
  
+ current dir

#+NAME: transmission.service.d-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/systemd/system/transmission.service.d/username.conf"
<<transmission.service.d>>
#+END_SRC

**** unbound-netns.service tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ root dir

#+NAME: unbound-netns.service-root-dir
#+BEGIN_SRC conf :noweb yes :tangle "/doas::/etc/systemd/system/unbound-netns.service" :tangle-mode (identity #o644)
<<unbound-netns.service>>
#+END_SRC
  
+ current dir

#+NAME: unbound-netns.service-current-dir
#+BEGIN_SRC conf :noweb yes :tangle "etc/systemd/system/unbound-netns.service"
<<unbound-netns.service>>
#+END_SRC
